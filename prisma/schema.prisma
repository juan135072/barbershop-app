// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(ADMIN)
  barbershopId  String?
  barbershop    Barbershop? @relation(fields: [barbershopId], references: [id])
  accounts      Account[]
  sessions      Session[]
  barber        Barber?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Barbershop {
  id          String    @id @default(cuid())
  name        String
  address     String
  phone       String
  email       String
  description String?
  logo        String?
  openingTime String
  closingTime String
  users       User[]
  barbers     Barber[]
  services    Service[]
  appointments Appointment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Barber {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  barbershopId String
  barbershop  Barbershop @relation(fields: [barbershopId], references: [id])
  specialties String[]
  commission  Float     @default(0)
  appointments Appointment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Service {
  id          String    @id @default(cuid())
  name        String
  description String?
  price       Float
  duration    Int       // en minutos
  barbershopId String
  barbershop  Barbershop @relation(fields: [barbershopId], references: [id])
  appointments Appointment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Appointment {
  id          String   @id @default(cuid())
  date        DateTime
  startTime   String
  endTime     String
  status      String   @default("PENDING") // PENDING, CONFIRMED, CANCELLED, COMPLETED
  clientName  String
  clientPhone String
  clientEmail String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  barberId     String
  barber       Barber     @relation(fields: [barberId], references: [id])
  serviceId    String
  service      Service    @relation(fields: [serviceId], references: [id])

  @@index([barbershopId])
  @@index([barberId])
  @@index([serviceId])
}

enum UserRole {
  ADMIN
  BARBER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}
